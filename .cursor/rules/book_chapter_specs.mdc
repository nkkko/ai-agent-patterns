---
description: Manages book chapter specifications in the specs/ folder and maintains the SPECS.md index
globs: ["specs/*.md", "SPECS.md"]
alwaysApply: false
---
{
  "name": "Book Chapter Specifications",
  "description": "Manages specifications for book chapters and keeps the SPECS.md index updated",
  "pattern": {
    "intent": ["create spec", "new specification", "update spec", "chapter specification", "add to specs index", "update specs index"]
  },
  "action": {
    "type": "code",
    "code": "try {\n  const fs = require('fs');\n  const path = require('path');\n  \n  // Function to create a new spec file\n  function createSpec(chapterNum, chapterTitle) {\n    // Format chapter title for filename\n    const chapterSlug = chapterTitle\n      .toLowerCase()\n      .replace(/[^\\w\\s]/g, '')\n      .replace(/\\s+/g, '_');\n    \n    const specFileName = `${chapterNum.toString().padStart(2, '0')}_${chapterSlug}_spec.md`;\n    const specFilePath = path.join('specs', specFileName);\n    \n    // Create specs directory if it doesn't exist\n    if (!fs.existsSync('specs')) {\n      fs.mkdirSync('specs');\n    }\n    \n    // Check if spec already exists\n    if (fs.existsSync(specFilePath)) {\n      return {\n        success: false,\n        message: `Specification file already exists at ${specFilePath}. You can open and edit it directly.`,\n        filePath: specFilePath\n      };\n    }\n    \n    // Get the current date\n    const today = new Date();\n    const formattedDate = today.toISOString().split('T')[0]; // YYYY-MM-DD format\n    \n    // Create spec template\n    const specTemplate = `# Chapter ${chapterNum}: ${chapterTitle} - Specification\n\n## Overview\nThis specification outlines the content, structure, and key concepts for Chapter ${chapterNum} of \"AI Agent Design Patterns\".\n\n## Metadata\n- **Chapter Number:** ${chapterNum}\n- **Title:** ${chapterTitle}\n- **Created:** ${formattedDate}\n- **Last Updated:** ${formattedDate}\n- **Status:** Draft\n\n## Chapter Goals\n- Goal 1\n- Goal 2\n- Goal 3\n\n## Key Concepts\n- Concept 1\n- Concept 2\n- Concept 3\n\n## Patterns to Include\n- Pattern 1\n  - Description\n  - Use case\n  - Implementation considerations\n- Pattern 2\n  - Description\n  - Use case\n  - Implementation considerations\n\n## Code Examples\n- Example 1: Brief description\n- Example 2: Brief description\n\n## Diagrams\n- Diagram 1: Brief description\n- Diagram 2: Brief description\n\n## Prerequisites\nKnowledge or concepts the reader should understand before reading this chapter:\n- Prerequisite 1\n- Prerequisite 2\n\n## Related Chapters\n- Chapter X: Brief explanation of relationship\n- Chapter Y: Brief explanation of relationship\n\n## Notes\nAdditional notes, considerations, or questions about the chapter content.\n`;\n    \n    // Write the file\n    fs.writeFileSync(specFilePath, specTemplate);\n    \n    return {\n      success: true,\n      message: `Created new specification file at ${specFilePath}`,\n      filePath: specFilePath\n    };\n  }\n  \n  // Function to update SPECS.md index\n  function updateSpecsIndex() {\n    // Check if specs directory exists\n    if (!fs.existsSync('specs')) {\n      return {\n        success: false,\n        message: \"No specs directory found. Please create at least one specification first.\"\n      };\n    }\n    \n    // Get all spec files\n    const specFiles = fs.readdirSync('specs')\n      .filter(file => file.endsWith('_spec.md'))\n      .sort();\n    \n    if (specFiles.length === 0) {\n      return {\n        success: false,\n        message: \"No specification files found in the specs directory.\"\n      };\n    }\n    \n    // Parse chapter info from filenames\n    const chapters = [];\n    for (const file of specFiles) {\n      const match = file.match(/^(\\d+)_(.+)_spec\\.md$/);\n      if (match) {\n        const chapterNum = parseInt(match[1], 10);\n        const chapterSlug = match[2];\n        \n        // Read the file to get the title\n        const content = fs.readFileSync(path.join('specs', file), 'utf8');\n        const titleMatch = content.match(/# Chapter \\d+: ([^\\n-]+)/);\n        let chapterTitle = titleMatch ? titleMatch[1].trim() : chapterSlug.replace(/_/g, ' ');\n        \n        // Get status if available\n        let status = 'Draft';\n        const statusMatch = content.match(/\\*\\*Status:\\*\\* ([^\\n]+)/);\n        if (statusMatch) {\n          status = statusMatch[1].trim();\n        }\n        \n        chapters.push({\n          number: chapterNum,\n          title: chapterTitle,\n          status: status,\n          file: file\n        });\n      }\n    }\n    \n    // Generate the index content\n    let indexContent = `# AI Agent Design Patterns - Chapter Specifications\n\nThis document provides links to detailed specifications for each chapter of the book.\n\n## Specification Status\n\n| Chapter | Title | Status | Specification |\n|---------|-------|--------|---------------|\n`;\n    \n    for (const chapter of chapters) {\n      indexContent += `| ${chapter.number} | ${chapter.title} | ${chapter.status} | [Spec](mdc:specs/${chapter.file}) |\n`;\n    }\n    \n    indexContent += `\n## How to Use Specifications\n\nThese specification documents serve as planning tools for chapter content:\n\n1. **For authors:** Use these specs to understand the intended scope and content of each chapter\n2. **For contributors:** Review specs to see where your contributions might fit\n3. **For reviewers:** Reference specs when providing feedback on chapter drafts\n\n## Creating New Specifications\n\nTo create a new chapter specification:\n\n1. Use the \"create spec\" command with the chapter number and title\n2. Edit the generated template with the specific details for your chapter\n3. Update this index to add the new specification\n\n## Updating Specifications\n\nWhen making significant changes to a chapter plan:\n\n1. Update the relevant specification document\n2. Change the \"Last Updated\" date in the metadata section\n3. Update the status if appropriate (Draft → In Progress → Review → Final)\n`;\n    \n    // Write the index file\n    fs.writeFileSync('SPECS.md', indexContent);\n    \n    return {\n      success: true,\n      message: `Updated SPECS.md index with ${chapters.length} specifications`\n    };\n  }\n  \n  // Extract chapter number and title from the input\n  const specRegex = /chapter\\s*(\\d+)[:\\s]\\s*([\\w\\s]+)/i;\n  const specMatch = input.match(specRegex);\n  \n  // If the input is about creating a new spec\n  if (specMatch && (input.toLowerCase().includes('create spec') || input.toLowerCase().includes('new specification'))) {\n    const chapterNum = parseInt(specMatch[1], 10);\n    const chapterTitle = specMatch[2].trim();\n    \n    const result = createSpec(chapterNum, chapterTitle);\n    \n    if (result.success) {\n      // Update the index after creating a new spec\n      const indexResult = updateSpecsIndex();\n      \n      return `${result.message}\\n\\nThe specification template includes sections for:\\n\\n- Chapter metadata\\n- Goals and key concepts\\n- Patterns to include\\n- Code examples and diagrams\\n- Prerequisites and related chapters\\n\\n${indexResult.success ? indexResult.message : ''}\\n\\nYou can now edit the specification file to add detailed content.`;\n    } else {\n      return result.message;\n    }\n  }\n  \n  // If the input is about updating the specs index\n  if (input.toLowerCase().includes('update specs index') || input.toLowerCase().includes('add to specs index')) {\n    const result = updateSpecsIndex();\n    \n    if (result.success) {\n      return `${result.message}\\n\\nThe SPECS.md index has been updated with the latest specifications. It includes:\\n\\n- A table listing all chapters with their status\\n- Instructions for using specifications\\n- Guidelines for creating and updating specs`;\n    } else {\n      return result.message;\n    }\n  }\n  \n  // Default response if the intent isn't clear\n  return \"I can help you create a new chapter specification or update the specs index. Please specify which action you'd like to take.\";\n} catch (error) {\n  return `Error processing specification request: ${error.message}`;\n}"
  },
  "examples": [
    {
      "input": "Create spec for Chapter 3: Tool Integration Patterns",
      "output": "Created new specification file at specs/03_tool_integration_patterns_spec.md\n\nThe specification template includes sections for:\n\n- Chapter metadata\n- Goals and key concepts\n- Patterns to include\n- Code examples and diagrams\n- Prerequisites and related chapters\n\nUpdated SPECS.md index with 3 specifications\n\nYou can now edit the specification file to add detailed content."
    },
    {
      "input": "Update specs index",
      "output": "Updated SPECS.md index with 3 specifications\n\nThe SPECS.md index has been updated with the latest specifications. It includes:\n\n- A table listing all chapters with their status\n- Instructions for using specifications\n- Guidelines for creating and updating specs"
    }
  ]
}