---
description: Standards for cross-references between chapters in the book
globs: chapters/*.md
alwaysApply: false
---
{
  "name": "Cross-References",
  "description": "Standards for creating and managing cross-references between chapters in the AI Agent Design Patterns book",
  "pattern": {
    "intent": ["add cross reference", "reference another chapter", "link to chapter", "reference section", "cross reference"]
  },
  "action": {
    "type": "code",
    "code": "try {\n  // Get current file path to determine chapter number\n  const filePath = document.fileName;\n  const currentChapterMatch = filePath.match(/chapters\\/(\\d+)_([\\w_]+)\\.md/);\n  \n  if (!currentChapterMatch) {\n    return \"This doesn't appear to be a chapter file. Cross-references can only be added to chapter files in the chapters/ directory.\";\n  }\n  \n  const currentChapterNum = parseInt(currentChapterMatch[1], 10);\n  const fs = require('fs');\n  \n  // Get list of all chapters\n  let chapters = [];\n  try {\n    const chapterFiles = fs.readdirSync('chapters')\n      .filter(file => file.match(/^\\d+_.*\\.md$/) && !file.includes('README'));\n      \n    chapters = chapterFiles.map(file => {\n      const match = file.match(/^(\\d+)_([\\w_]+)\\.md$/);\n      if (match) {\n        const chapterNum = parseInt(match[1], 10);\n        const chapterName = match[2].replace(/_/g, ' ')\n          .split(' ')\n          .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n          .join(' ');\n          \n        return {\n          num: chapterNum,\n          name: chapterName,\n          file: file\n        };\n      }\n      return null;\n    }).filter(Boolean);\n  } catch (e) {\n    console.error('Error reading chapters directory:', e);\n  }\n  \n  // Find chapters referenced in the input\n  const chapterReferences = [];\n  const chapterRegex = /chapter\\s*(\\d+)/gi;\n  let match;\n  \n  while ((match = chapterRegex.exec(input)) !== null) {\n    const referencedChapterNum = parseInt(match[1], 10);\n    const chapter = chapters.find(c => c.num === referencedChapterNum);\n    \n    if (chapter) {\n      chapterReferences.push(chapter);\n    }\n  }\n  \n  // Check for keyword references if no explicit chapter numbers are found\n  if (chapterReferences.length === 0) {\n    const keywords = [\n      { term: 'building blocks', chapters: [1] },\n      { term: 'core architecture', chapters: [2] },\n      { term: 'architectural patterns', chapters: [2] },\n      { term: 'tool integration', chapters: [3] },\n      { term: 'memory', chapters: [4] },\n      { term: 'state', chapters: [4] },\n      { term: 'multi-agent', chapters: [5] },\n      { term: 'case study', chapters: [6] }\n    ];\n    \n    for (const keyword of keywords) {\n      if (input.toLowerCase().includes(keyword.term)) {\n        for (const chapterNum of keyword.chapters) {\n          const chapter = chapters.find(c => c.num === chapterNum);\n          if (chapter) {\n            chapterReferences.push(chapter);\n          }\n        }\n      }\n    }\n  }\n  \n  if (chapterReferences.length === 0) {\n    return `I need more information about which chapter you want to reference. Please specify a chapter number or a key topic.\\n\\nAvailable chapters:\\n${chapters.map(c => `${c.num}. ${c.name}`).join('\\n')}`;\n  }\n  \n  // Generate cross-references\n  let result = \"I'll help you add cross-references to your chapter. Here are the formatted references:\\n\\n\";\n  \n  for (const chapter of chapterReferences) {\n    // Format differently for chapter before current or after current\n    const relativePosition = chapter.num < currentChapterNum ? 'previous' : 'next';\n    \n    // Create relative path\n    const relativePath = chapter.file;\n    \n    result += `**Reference to Chapter ${chapter.num}:**\\n`;\n    result += `\\n\\`\\`\\`markdown\\n`;\n    result += `As we ${chapter.num < currentChapterNum ? 'discussed' : 'will see'} in [Chapter ${chapter.num}: ${chapter.name}](${relativePath}), ...\n`;\n    result += `\\`\\`\\`\\n\\n`;\n    \n    // Add explanation for using the reference\n    result += `This creates a clickable link to the ${relativePosition} chapter. When using cross-references:\\n\\n`;\n    result += `1. Maintain context so readers understand the connection between chapters\\n`;\n    result += `2. Provide enough context that the current chapter can be understood without reading the referenced chapter\\n`;\n    result += `3. Use the exact chapter title format consistently\\n\\n`;\n  }\n  \n  return result;\n} catch (error) {\n  return `Error processing cross-reference: ${error.message}`;\n}"
  },
  "examples": [
    {
      "input": "Add a reference to Chapter 2 for architectural patterns",
      "output": "I'll help you add cross-references to your chapter. Here are the formatted references:\n\n**Reference to Chapter 2:**\n\n```markdown\nAs we discussed in [Chapter 2: Core Architectural Patterns](02_core_architectural_patterns.md), ...\n```\n\nThis creates a clickable link to the previous chapter. When using cross-references:\n\n1. Maintain context so readers understand the connection between chapters\n2. Provide enough context that the current chapter can be understood without reading the referenced chapter\n3. Use the exact chapter title format consistently"
    }
  ]
}