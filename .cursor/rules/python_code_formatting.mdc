---
description: Ensures consistent Python code formatting in book examples
globs: chapters/*.md, images/*.py
alwaysApply: false
---
{
  "name": "Python Code Formatting",
  "description": "Standards for Python code examples in the AI Agent Design Patterns book",
  "pattern": {
    "intent": ["format python code", "python code style", "fix python code", "python example formatting"]
  },
  "action": {
    "type": "code",
    "code": "try {\n  const content = document.getText();\n  \n  // Check if this is a Python file or Python code block in markdown\n  let isPythonFile = document.fileName.endsWith('.py');\n  let pythonBlocks = [];\n  \n  if (!isPythonFile) {\n    // Extract Python code blocks from markdown\n    const pythonRegex = /```python([\\s\\S]*?)```/g;\n    let match;\n    while ((match = pythonRegex.exec(content)) !== null) {\n      pythonBlocks.push({\n        code: match[1],\n        start: match.index,\n        end: match.index + match[0].length\n      });\n    }\n    \n    if (pythonBlocks.length === 0) {\n      return \"No Python code blocks found to format.\";\n    }\n  }\n  \n  // Helper function to format Python code\n  function formatPythonCode(code) {\n    // Add consistent docstrings if missing\n    if (code.includes('class ') && !code.includes('\"\"\"')) {\n      code = code.replace(/class\\s+(\\w+)[^:]*:/g, 'class $1:\\n    \"\"\"\\n    $1 class for handling specific agent functionality.\\n    \"\"\"');\n    }\n    \n    if (code.includes('def ') && !code.includes('\"\"\"')) {\n      code = code.replace(/def\\s+(\\w+)[^:]*:/g, 'def $1:\\n    \"\"\"\\n    $1 function to perform specific operation.\\n    \"\"\"');\n    }\n    \n    // Ensure imports are at the top and sorted\n    const importLines = [];\n    const codeLines = [];\n    const lines = code.split('\\n');\n    \n    for (const line of lines) {\n      if (line.trim().startsWith('import ') || line.trim().startsWith('from ')) {\n        importLines.push(line.trim());\n      } else {\n        codeLines.push(line);\n      }\n    }\n    \n    // Sort imports\n    importLines.sort();\n    \n    // Group standard library imports first, then third-party, then local\n    const stdlibImports = importLines.filter(line => \n      !line.includes('.') && \n      !line.includes('torch') && \n      !line.includes('numpy') && \n      !line.includes('matplotlib') && \n      !line.includes('pandas')\n    );\n    \n    const thirdPartyImports = importLines.filter(line => \n      line.includes('torch') || \n      line.includes('numpy') || \n      line.includes('matplotlib') || \n      line.includes('pandas')\n    );\n    \n    const localImports = importLines.filter(line => \n      line.includes('.') && \n      !thirdPartyImports.includes(line)\n    );\n    \n    // Reassemble code with organized imports\n    let formattedCode = '';\n    if (stdlibImports.length > 0) {\n      formattedCode += stdlibImports.join('\\n') + '\\n';\n    }\n    \n    if (thirdPartyImports.length > 0) {\n      if (formattedCode.length > 0) formattedCode += '\\n';\n      formattedCode += thirdPartyImports.join('\\n') + '\\n';\n    }\n    \n    if (localImports.length > 0) {\n      if (formattedCode.length > 0) formattedCode += '\\n';\n      formattedCode += localImports.join('\\n') + '\\n';\n    }\n    \n    if (importLines.length > 0 && codeLines.length > 0) {\n      formattedCode += '\\n';\n    }\n    \n    formattedCode += codeLines.join('\\n');\n    \n    // Ensure consistent spacing\n    formattedCode = formattedCode\n      .replace(/\\n{3,}/g, '\\n\\n')  // No more than 2 consecutive newlines\n      .replace(/class\\s+/g, '\\nclass ')  // Newline before classes\n      .replace(/\\n\\nclass/g, '\\nclass')  // But not two newlines\n      .trim();\n      \n    return formattedCode;\n  }\n  \n  if (isPythonFile) {\n    return formatPythonCode(content);\n  } else {\n    // Format each Python code block in markdown\n    let formattedContent = content;\n    let offset = 0;\n    \n    for (const block of pythonBlocks) {\n      const formattedBlock = formatPythonCode(block.code);\n      const newBlock = '```python\\n' + formattedBlock + '\\n```';\n      \n      formattedContent = formattedContent.substring(0, block.start + offset) + \n                        newBlock + \n                        formattedContent.substring(block.end + offset);\n      \n      offset += (newBlock.length - (block.end - block.start));\n    }\n    \n    return formattedContent;\n  }\n} catch (error) {\n  return `Error formatting Python code: ${error.message}`;\n}"
  },
  "examples": [
    {
      "input": "Format the Python code in this chapter",
      "output": "I've formatted all Python code blocks in this chapter according to the book's style guidelines. This includes:\n\n1. Proper docstrings for classes and functions\n2. Organized imports (standard library first, then third-party libraries, then local imports)\n3. Consistent spacing between sections\n4. PEP 8 style compliance for readability"
    }
  ]
}