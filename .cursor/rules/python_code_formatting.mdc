---
description: Avoid code examples in favor of narrative examples and diagrams
globs: ["chapters/*.md"]
alwaysApply: false
---
{
  "name": "Avoid Code Examples",
  "description": "Guidelines for replacing code examples with narrative examples and diagrams in the Agentic AI Design Patterns book",
  "pattern": {
    "intent": ["remove code example", "replace code with narrative", "convert code to diagram", "avoid code examples"]
  },
  "action": {
    "type": "text",
    "text": "# Guidelines for Replacing Code Examples\n\n## Philosophy\nThe book should focus on conceptual understanding through narrative examples and visual diagrams rather than implementation details through code examples.\n\n## Recommended Approaches\n\n### 1. Use Narrative Examples\nDescribe the pattern implementation in plain language, focusing on:\n- The high-level flow and components\n- The relationships between components\n- The key decisions and trade-offs\n\n### 2. Use Mermaid Diagrams\nUse appropriate diagram types to illustrate concepts:\n- **Flowcharts**: For process flows and decision paths\n- **Sequence Diagrams**: For interactions between components\n- **Class Diagrams**: For structure and relationships\n- **State Diagrams**: For state transitions\n\n### 3. Focus on Conceptual Understanding\nEmphasize understanding the pattern rather than implementation details:\n- Provide clear explanations of why and when to use the pattern\n- Explain the key principles behind the pattern\n- Discuss trade-offs and alternatives\n\n## Example Transformation\n\nInstead of code like:\n```python\nclass Agent:\n    def __init__(self, tools):\n        self.tools = tools\n        \n    def execute(self, input):\n        for tool in self.tools:\n            if tool.can_handle(input):\n                return tool.execute(input)\n```\n\nUse a narrative description:\n\"The Agent maintains a collection of tools and routes requests to the appropriate tool. When receiving input, it evaluates each tool's capability to handle the request and delegates execution to the first suitable tool.\"\n\nCombined with a sequence diagram:\n```mermaid\nsequenceDiagram\n    participant User\n    participant Agent\n    participant Tool1\n    participant Tool2\n    \n    User->>Agent: Submit request\n    Agent->>Tool1: can_handle(request)?\n    Tool1-->>Agent: False\n    Agent->>Tool2: can_handle(request)?\n    Tool2-->>Agent: True\n    Agent->>Tool2: execute(request)\n    Tool2-->>Agent: Result\n    Agent-->>User: Return result\n```\n"
  },
  "examples": [
    {
      "input": "How do I replace code examples in my chapter?",
      "output": "To replace code examples in your chapter, follow these guidelines:\n\n1. **Convert code to narrative descriptions:**\n   - Describe what the code does in plain language\n   - Focus on concepts rather than implementation details\n   - Highlight key decision points and relationships\n\n2. **Create Mermaid diagrams to illustrate:**\n   - Process flows using flowcharts\n   - Component interactions using sequence diagrams\n   - Structural relationships using class diagrams\n   - State transitions using state diagrams\n\n3. **Emphasize conceptual understanding:**\n   - When to use particular patterns\n   - Why certain approaches are beneficial\n   - Trade-offs between different approaches\n\nThis approach makes the book more accessible to readers with different programming backgrounds while focusing on the patterns themselves rather than specific implementations."
    }
  ]
}